plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.qingniu.blesdkdemopro"
        minSdk 21
        targetSdk 32
        versionCode 2
        versionName "1.2.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        myConfig {
            storeFile file("../buildsystem/qnsdk_demo.jks")
            storePassword "123456"
            keyAlias "qntest_demo"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.myConfig
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.myConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def str = variant.buildType.name
                def buildTime = new Date().format("yyyy-MM-dd", TimeZone.getTimeZone('UTC'))
                def fileName = "BleSdkDemoPro_${str}_${defaultConfig.versionName}_${buildTime}.apk"
                output.outputFileName = fileName
            }
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.5.0-alpha05"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    implementation("com.tbruyelle.rxpermissions2:rxpermissions:0.9.5") {
        exclude group: "com.android.support"
    }

    implementation("androidx.room:room-runtime:$room_version")
    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$room_version")
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$room_version")
    // optional - Test helpers
    testImplementation("androidx.room:room-testing:$room_version")
    implementation("androidx.localbroadcastmanager:localbroadcastmanager:1.0.0@aar")


    if (USE_BLE_TYPE as int == 0) {
        implementation project(':qnPluginX')
        implementation project(':qnHeightWeightScalePluginX')
        implementation project(':qnAlgorithmPluginX')
        implementation project(':qnRulerPluginX')
        implementation project(':qnScalePluginX')
    } else if (USE_BLE_TYPE as int == 1) {
        implementation "com.github.YolandaQingniu.BleSdkDemoPro:QNPluginX:1.2.0"
        implementation "com.github.YolandaQingniu.BleSdkDemoPro:QNHeightWeightScalePluginX:1.2.0"
        implementation "com.github.YolandaQingniu.BleSdkDemoPro:QNAlgorithmPluginX:1.2.0"
        implementation "com.github.YolandaQingniu.BleSdkDemoPro:QNRulerPluginX:1.2.0"
        implementation "com.github.YolandaQingniu.BleSdkDemoPro:QNScalePluginX:1.2.0"
    } else if (USE_BLE_TYPE as int == 2) {
        implementation project(':qnPlugin')
        implementation project(':qnHeightWeightScalePlugin')
        implementation project(':qnAlgorithmPlugin')
        implementation project(':qnRulerPlugin')
        implementation project(':qnScalePlugin')
        implementation project(':qnKitchenPlugin')
    }
}